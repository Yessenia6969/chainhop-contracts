{
  "address": "0x68E5CDB18301002453E21f19Ee736baE2A2CDA5c",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "dex",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct ICodec.SwapDescription",
          "name": "_swap",
          "type": "tuple"
        }
      ],
      "name": "decodeCalldata",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amountInOverride",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "encodeCalldataWithOverride",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "swapCalldata",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2bb74dd9218f2b48dd3b705b4f468f1fe527e4af5d0b2b154a3c96f59ace4d5d",
  "receipt": {
    "to": null,
    "from": "0x8b5F94a2c2e23eE8cC0Ff56872aF973243eF7628",
    "contractAddress": "0x68E5CDB18301002453E21f19Ee736baE2A2CDA5c",
    "transactionIndex": 23,
    "gasUsed": "593456",
    "logsBloom": "0x
    "blockHash": "0xfa4281f92c3492b2ccccbfaaebb08784a2ef1051a16aef258686a7d0c6994056",
    "transactionHash": "0x2bb74dd9218f2b48dd3b705b4f468f1fe527e4af5d0b2b154a3c96f59ace4d5d",
    "logs": [
      {
        "transactionIndex": 23,
        "blockNumber": 13367357,
        "transactionHash": "0x2bb74dd9218f2b48dd3b705b4f468f1fe527e4af5d0b2b154a3c96f59ace4d5d",
        "address": "0x68E5CDB18301002453E21f19Ee736baE2A2CDA5c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008b5f94a2c2e23ee8cc0ff56872af973243ef7628"
        ],
        "data": "0x",
        "logIndex": 61,
        "blockHash": "0xfa4281f92c3492b2ccccbfaaebb08784a2ef1051a16aef258686a7d0c6994056"
      }
    ],
    "blockNumber": 13367357,
    "cumulativeGasUsed": "4395326",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "14494316c3c3d23a6493d6d7758b5e13",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"dex\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ICodec.SwapDescription\",\"name\":\"_swap\",\"type\":\"tuple\"}],\"name\":\"decodeCalldata\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amountInOverride\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"encodeCalldataWithOverride\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"swapCalldata\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"padoriku\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"a special codec for a pool that implements exchange_underlying() differently than all others. i.e. the \\\"sUSD\\\" pool on Ethereum\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"encode/decode calldata\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/codecs/CurveSpecialMetaPoolCodec.sol\":\"CurveSpecialMetaPoolCodec\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/codecs/CurveSpecialMetaPoolCodec.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/ICodec.sol\\\";\\nimport \\\"../interfaces/ICurvePool.sol\\\";\\n\\n/**\\n * @title a special codec for a pool that implements exchange_underlying() differently than all others.\\n * i.e. the \\\"sUSD\\\" pool on Ethereum\\n * @author padoriku\\n * @notice encode/decode calldata\\n */\\ncontract CurveSpecialMetaPoolCodec is ICodec, Ownable {\\n    struct SwapCalldata {\\n        int128 i;\\n        int128 j;\\n        uint256 dx;\\n        uint256 min_dy;\\n    }\\n\\n    function decodeCalldata(ICodec.SwapDescription calldata _swap)\\n        external\\n        view\\n        returns (\\n            uint256 amountIn,\\n            address tokenIn,\\n            address tokenOut\\n        )\\n    {\\n        SwapCalldata memory data = abi.decode((_swap.data[4:]), (SwapCalldata));\\n        amountIn = data.dx;\\n        tokenIn = ICurvePool(_swap.dex).underlying_coins(uint128(data.i));\\n        tokenOut = ICurvePool(_swap.dex).underlying_coins(uint128(data.j));\\n    }\\n\\n    function encodeCalldataWithOverride(\\n        bytes calldata _data,\\n        uint256 _amountInOverride,\\n        address // _receiverOverride\\n    ) external pure returns (bytes memory swapCalldata) {\\n        bytes4 selector = bytes4(_data);\\n        SwapCalldata memory data = abi.decode((_data[4:]), (SwapCalldata));\\n        data.dx = _amountInOverride;\\n        return abi.encodeWithSelector(selector, data);\\n    }\\n}\\n\",\"keccak256\":\"0x737e1e54c6a360b99a24a78bf8e994ccc34716137f099edb40203d27e844c864\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/ICodec.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface ICodec {\\n    struct SwapDescription {\\n        address dex; // the DEX to use for the swap, zero address implies no swap needed\\n        bytes data; // the data to call the dex with\\n    }\\n\\n    function decodeCalldata(SwapDescription calldata swap)\\n        external\\n        view\\n        returns (\\n            uint256 amountIn,\\n            address tokenIn,\\n            address tokenOut\\n        );\\n\\n    function encodeCalldataWithOverride(\\n        bytes calldata data,\\n        uint256 amountInOverride,\\n        address receiverOverride\\n    ) external pure returns (bytes memory swapCalldata);\\n}\\n\",\"keccak256\":\"0x3c063f0ffd87df3df38998c78273bc00ac835331905be997c7e3c6aa3bdbdcc4\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/ICurvePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.12;\\n\\ninterface ICurvePool {\\n    function coins(uint256 i) external view returns (address);\\n\\n    // specifically for CurveNonStandardMetaPoolCodec, the uint128  not used in other codecs\\n    function underlying_coins(uint128 i) external view returns (address);\\n\\n    // plain & meta pool\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    // meta pool\\n    function get_dy_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    // plain & meta pool\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external;\\n\\n    // meta pool\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    // special function signature that is only used by the sUSD pool on Ethereum 0xA5407eAE9Ba41422680e2e00537571bcC53efBfD\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb6ff4e4cda8bd98deb32cb9c7e54cd29ffe252e7137e93a177a5769e76015f57\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6109548061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063715018a611610050578063715018a6146100b75780638da5cb5b146100c1578063f2fde38b146100da57600080fd5b8063358f0e1c1461006c5780634c6da26914610097575b600080fd5b61007f61007a3660046103e1565b6100ed565b60405161008e93929190610440565b60405180910390f35b6100aa6100a53660046104e6565b610227565b60405161008e91906105b7565b6100bf6102c3565b005b6000546001600160a01b031660405161008e91906105cf565b6100bf6100e83660046105dd565b610302565b60008080806100ff60208601866105fe565b61010d91600490829061065d565b81019061011a9190610773565b60408101519450905061013060208601866105dd565b8151604051631654775560e21b81526001600160a01b039290921691635951dd549161015e916004016107ac565b602060405180830381865afa15801561017b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019f91906107c5565b92506101ae60208601866105dd565b6001600160a01b0316635951dd5482602001516040518263ffffffff1660e01b81526004016101dd91906107ac565b602060405180830381865afa1580156101fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021e91906107c5565b93959294505050565b6060600061023585876107e6565b90506000610246866004818a61065d565b8101906102539190610773565b604080820187905251909150829061026f908390602401610875565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152925050505b949350505050565b6000546001600160a01b031633146102f65760405162461bcd60e51b81526004016102ed90610883565b60405180910390fd5b610300600061035e565b565b6000546001600160a01b0316331461032c5760405162461bcd60e51b81526004016102ed90610883565b6001600160a01b0381166103525760405162461bcd60e51b81526004016102ed906108bd565b61035b8161035e565b50565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000604082840312156103db576103db600080fd5b50919050565b6000602082840312156103f6576103f6600080fd5b813567ffffffffffffffff81111561041057610410600080fd5b6102bb848285016103c6565b805b82525050565b60006001600160a01b0382165b92915050565b61041e81610424565b6060810161044e828661041c565b61045b6020830185610437565b6102bb6040830184610437565b60008083601f84011261047d5761047d600080fd5b50813567ffffffffffffffff81111561049857610498600080fd5b6020830191508360018202830111156104b3576104b3600080fd5b9250929050565b805b811461035b57600080fd5b8035610431816104ba565b6104bc81610424565b8035610431816104d2565b600080600080606085870312156104ff576104ff600080fd5b843567ffffffffffffffff81111561051957610519600080fd5b61052587828801610468565b94509450506020610538878288016104c7565b9250506040610549878288016104db565b91505092959194509250565b60005b83811015610570578181015183820152602001610558565b8381111561057f576000848401525b50505050565b600061058f825190565b8084526020840193506105a6818560208601610555565b601f01601f19169290920192915050565b602080825281016105c88184610585565b9392505050565b602081016104318284610437565b6000602082840312156105f2576105f2600080fd5b60006102bb84846104db565b6000808335601e193685900301811261061957610619600080fd5b80840192508235915067ffffffffffffffff82111561063a5761063a600080fd5b60208301925060018202360383131561065557610655600080fd5b509250929050565b6000808585111561067057610670600080fd5b8386111561068057610680600080fd5b5050820193919092039150565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156106c9576106c961068d565b6040525050565b60006106db60405190565b90506106e782826106a3565b919050565b6104bc81600f0b90565b8035610431816106ec565b60006080828403121561071657610716600080fd5b61072060806106d0565b9050600061072e84846106f6565b825250602061073f848483016106f6565b6020830152506040610753848285016104c7565b6040830152506060610767848285016104c7565b60608301525092915050565b60006080828403121561078857610788600080fd5b60006102bb8484610701565b6fffffffffffffffffffffffffffffffff811661041e565b602081016104318284610794565b8051610431816104d2565b6000602082840312156107da576107da600080fd5b60006102bb84846107ba565b80356001600160e01b03191682826004821015610819576108146001600160e01b0319836004036008021b90565b831692505b505092915050565b61041e81600f0b90565b8051608083019061083c8482610821565b50602082015161084f6020850182610821565b506040820151610862604085018261041c565b50606082015161057f606085018261041c565b60808101610431828461082b565b60208082528181019081527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604083015260608201610431565b6020808252810161043181602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201527f646472657373000000000000000000000000000000000000000000000000000060408201526060019056fea264697066735822122039d8fc517dbd4071dd8b8c1cf2ff03a04457063aeea3c5822edda921b022b1ac64736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c8063715018a611610050578063715018a6146100b75780638da5cb5b146100c1578063f2fde38b146100da57600080fd5b8063358f0e1c1461006c5780634c6da26914610097575b600080fd5b61007f61007a3660046103e1565b6100ed565b60405161008e93929190610440565b60405180910390f35b6100aa6100a53660046104e6565b610227565b60405161008e91906105b7565b6100bf6102c3565b005b6000546001600160a01b031660405161008e91906105cf565b6100bf6100e83660046105dd565b610302565b60008080806100ff60208601866105fe565b61010d91600490829061065d565b81019061011a9190610773565b60408101519450905061013060208601866105dd565b8151604051631654775560e21b81526001600160a01b039290921691635951dd549161015e916004016107ac565b602060405180830381865afa15801561017b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019f91906107c5565b92506101ae60208601866105dd565b6001600160a01b0316635951dd5482602001516040518263ffffffff1660e01b81526004016101dd91906107ac565b602060405180830381865afa1580156101fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021e91906107c5565b93959294505050565b6060600061023585876107e6565b90506000610246866004818a61065d565b8101906102539190610773565b604080820187905251909150829061026f908390602401610875565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152925050505b949350505050565b6000546001600160a01b031633146102f65760405162461bcd60e51b81526004016102ed90610883565b60405180910390fd5b610300600061035e565b565b6000546001600160a01b0316331461032c5760405162461bcd60e51b81526004016102ed90610883565b6001600160a01b0381166103525760405162461bcd60e51b81526004016102ed906108bd565b61035b8161035e565b50565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000604082840312156103db576103db600080fd5b50919050565b6000602082840312156103f6576103f6600080fd5b813567ffffffffffffffff81111561041057610410600080fd5b6102bb848285016103c6565b805b82525050565b60006001600160a01b0382165b92915050565b61041e81610424565b6060810161044e828661041c565b61045b6020830185610437565b6102bb6040830184610437565b60008083601f84011261047d5761047d600080fd5b50813567ffffffffffffffff81111561049857610498600080fd5b6020830191508360018202830111156104b3576104b3600080fd5b9250929050565b805b811461035b57600080fd5b8035610431816104ba565b6104bc81610424565b8035610431816104d2565b600080600080606085870312156104ff576104ff600080fd5b843567ffffffffffffffff81111561051957610519600080fd5b61052587828801610468565b94509450506020610538878288016104c7565b9250506040610549878288016104db565b91505092959194509250565b60005b83811015610570578181015183820152602001610558565b8381111561057f576000848401525b50505050565b600061058f825190565b8084526020840193506105a6818560208601610555565b601f01601f19169290920192915050565b602080825281016105c88184610585565b9392505050565b602081016104318284610437565b6000602082840312156105f2576105f2600080fd5b60006102bb84846104db565b6000808335601e193685900301811261061957610619600080fd5b80840192508235915067ffffffffffffffff82111561063a5761063a600080fd5b60208301925060018202360383131561065557610655600080fd5b509250929050565b6000808585111561067057610670600080fd5b8386111561068057610680600080fd5b5050820193919092039150565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156106c9576106c961068d565b6040525050565b60006106db60405190565b90506106e782826106a3565b919050565b6104bc81600f0b90565b8035610431816106ec565b60006080828403121561071657610716600080fd5b61072060806106d0565b9050600061072e84846106f6565b825250602061073f848483016106f6565b6020830152506040610753848285016104c7565b6040830152506060610767848285016104c7565b60608301525092915050565b60006080828403121561078857610788600080fd5b60006102bb8484610701565b6fffffffffffffffffffffffffffffffff811661041e565b602081016104318284610794565b8051610431816104d2565b6000602082840312156107da576107da600080fd5b60006102bb84846107ba565b80356001600160e01b03191682826004821015610819576108146001600160e01b0319836004036008021b90565b831692505b505092915050565b61041e81600f0b90565b8051608083019061083c8482610821565b50602082015161084f6020850182610821565b506040820151610862604085018261041c565b50606082015161057f606085018261041c565b60808101610431828461082b565b60208082528181019081527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604083015260608201610431565b6020808252810161043181602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201527f646472657373000000000000000000000000000000000000000000000000000060408201526060019056fea264697066735822122039d8fc517dbd4071dd8b8c1cf2ff03a04457063aeea3c5822edda921b022b1ac64736f6c634300080c0033",
  "devdoc": {
    "author": "padoriku",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "a special codec for a pool that implements exchange_underlying() differently than all others. i.e. the \"sUSD\" pool on Ethereum",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "encode/decode calldata",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/codecs/CurveSpecialMetaPoolCodec.sol:CurveSpecialMetaPoolCodec",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}